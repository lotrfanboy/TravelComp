# Travel Planner SaaS Application (Node.js + React)

We build a full-stack travel planner with a Node.js/Express backend and a React frontend, using Tailwind CSS for styling. The backend uses Replit‚Äôs built-in database for prototyping, with a structure that allows migrating to Supabase/PostgreSQL later. We organize code into modular routes (e.g. `/api/users`, `/api/trips`, `/api/ai`) and separate database logic into utility functions. Authentication will be via email/password (mocked on Replit) with role-based access (`company`, `traveler`, `nomad`) prepared for future Supabase Auth integration.

## Backend Setup (Node.js + Express)

* **Express Server & Routes:** Initialize an Express server. Use middleware `app.use(express.json())` for JSON parsing. Separate route files for users, trips, comments, AI, etc. For example: `app.use('/api/users', userRouter);` and similar for `/api/trips` and `/api/ai`.

* **Replit DB Client:** Use the `replit-node` library‚Äôs RawClient or `replit.rawDB` to access the database. Example:

  ```js
  const replit = require('replit-node');
  const db = new replit.RawClient(process.env.REPLIT_DB_URL);
  // db.get, db.setMany, db.list, db.delete, etc.
  ```

  We will store users, trips, comments, etc. as JSON under keys. All DB operations are wrapped in functions (e.g. `getUserById`, `saveTrip`) to isolate them from Express routes for easy future migration.

* **Authentication & Roles:** Implement a simple email/password auth (for now, this can be mocked or use Replit Auth). We use middleware similar to `replit.authMiddleware` to populate `req.auth` with `{ id, name, roles }` when logged in. For example:

  ```js
  const express = require('express');
  const replit = require('replit-node');
  const app = express();
  app.use(replit.authMiddleware); // enables req.auth
  app.get('/api/secure-data', replit.requireAuth(), (req, res) => {
    res.json({ message: `Hello ${req.auth.name}`, roles: req.auth.roles });
  });
  ```

  We define roles (`company`, `traveler`, `nomad`) in user records and enforce them in route handlers (e.g. only `company` can create group trips, etc.).

* **Database Migration Ready:** Use environment variables (e.g. `DATABASE_URL`) for DB config, so we can switch to Supabase easily. Optionally integrate an ORM like Prisma: define a schema with User, Trip, Comment models (similar to \[30]) and generate migrations. Then migrating to Supabase is a matter of updating the `.env` with the Supabase Postgres connection and running `prisma migrate deploy`.

## Sidebar Navigation (React + Tailwind)

The sidebar is a responsive left-hand menu using Tailwind CSS and React. We use a component with icons (e.g. from Heroicons or React Icons) and labels for each item. Example with Material Tailwind components:

```jsx
import { List, ListItem, ListItemPrefix } from "@material-tailwind/react";
import { HomeIcon, PlusIcon, SaveIcon, ChartBarIcon, UserGroupIcon, Cog6ToothIcon } from "@heroicons/react/24/solid";

function Sidebar() {
  return (
    <div className="h-screen w-64 bg-white shadow-xl hidden sm:block"> {/* hide on xs */}
      <List className="p-4">
        <ListItem onClick={() => navigate('/dashboard')}>
          <ListItemPrefix><HomeIcon className="h-5 w-5"/></ListItemPrefix>
          <span className="hidden md:inline">Dashboard</span>
        </ListItem>
        <ListItem onClick={() => navigate('/create-trip')}>
          <ListItemPrefix><PlusIcon className="h-5 w-5"/></ListItemPrefix>
          <span className="hidden md:inline">Create Trip</span>
        </ListItem>
        {/* ... Saved Trips, AI Planner, Community, Settings */}
        <ListItem onClick={() => navigate('/settings')}>
          <ListItemPrefix><Cog6ToothIcon className="h-5 w-5"/></ListItemPrefix>
          <span className="hidden md:inline">Settings</span>
        </ListItem>
      </List>
    </div>
  );
}
```

* **Responsive:** We collapse labels on narrow screens: e.g. `<span className="hidden md:inline">Label</span>`. The outer `<div>` can be hidden on very small screens (`hidden sm:block`) or turned into an overlay. Tailwind‚Äôs breakpoints (`md:`) let us tailor layout by screen size.

* **Mobile Adaptation:** On mobile, show a hamburger menu or a minimized sidebar. For example, use a button that toggles a drawer with icons only. Utility classes like `md:flex` allow different layouts per breakpoint.

## Manual Trip Builder (Wizard Form)

We implement a multi-step wizard (using React state or React Router wizard pages) for manual trip creation:

### Step 1: Basic Trip Info

* **Form Fields:** Trip name, start date, end date (use date pickers), and destination entries.
* **Country + City Autocomplete:** Use RESTCountries API for country suggestions and GeoDB Cities API for city search. For example, on country select, fetch cities:

  ```jsx
  useEffect(() => {
    fetch('https://restcountries.com/v3.1/all?fields=name,cca2').then(...); // for countries
  }, []);
  function fetchCities(countryCode, query) {
    return fetch(`https://wft-geo-db.p.rapidapi.com/v1/geo/cities?countryIds=${countryCode}&namePrefix=${query}`, {
      headers: { 'X-RapidAPI-Key': GEODB_KEY }
    }).then(res => res.json());
  }
  ```
* **Validation:** Ensure the trip end date is after start date, and each stop‚Äôs start/end is within the overall trip window. For example:

  ```js
  if (new Date(itineraryStart) < new Date(tripStart)) {
    setError("Itinerary can't start before trip begins.");
  }
  ```

  For multi-stop logic, sort destinations by date and check for overlaps.

### Step 2: Interests & Themes

* **Thematic Selection:** Present checkboxes or toggle buttons for themes (`Culture`, `Nature`, `Nightlife`, `Relaxation`, `Adventure`, `Gastronomy`). These choices can later be used to recommend attractions. Example UI:

  ```jsx
  const themes = ["Culture", "Nature", "Nightlife", "Relaxation", "Adventure", "Gastronomy"];
  return (
    <div className="grid grid-cols-2 gap-4">
      {themes.map(t => (
        <button key={t} onClick={() => toggleTheme(t)}
          className={`px-4 py-2 rounded-full ${selected.includes(t)? 'bg-blue-600 text-white':'border'}`}>
          {t}
        </button>
      ))}
    </div>
  );
  ```

### Step 3: Transport & Accommodation Estimation

* **Transportation (Rome2Rio):** Query the Rome2Rio API (or a similar travel API) for routes between stops. For example:

  ```js
  async function getRoute(origin, destination) {
    const res = await fetch(`https://api.rome2rio.com/api/1.4/json/Search?oName=${origin}&dName=${destination}&currency=USD`, {
      headers: { 'Content-Type': 'application/json' }
    });
    return res.json(); // includes routes, prices, durations
  }
  ```

  This returns possible flights, trains, buses, etc. We parse and display estimated costs.
* **Accommodation (Booking.com API):** Use the Booking.com API via RapidAPI to fetch hotels/hostels. For example:

  ```js
  async function searchHotels(cityId, checkin, checkout) {
    const res = await fetch('https://booking-com.p.rapidapi.com/v1/hotels/search-by-coordinates', {
      method: 'GET',
      headers: { 'X-RapidAPI-Key': BOOKING_KEY },
      params: {
        city_id: cityId,
        checkin_date: checkin,
        checkout_date: checkout,
        adults_number: 1
      }
    });
    return res.json(); // includes hotel names, prices, images
  }
  ```
* **Display Estimations:** Show each segment (e.g. City A ‚Üí City B) with a card containing transportation options and a list of accommodations with price ranges. Each card can include an image, name, and cost. For instance, a Tailwind card:

  ```jsx
  <div className="max-w-sm bg-white shadow-lg rounded-lg overflow-hidden">
    <img className="w-full h-32 object-cover" src={hotel.imageUrl} />
    <div className="p-4">
      <h4 className="font-bold">{hotel.name}</h4>
      <p>${hotel.price} per night</p>
    </div>
  </div>
  ```

  The data is fetched asynchronously with `async/await` and errors caught in `.catch()`.

### Step 4: Budget & Summary

* **Budget Input:** Let users enter a daily budget for meals/activities. Multiply by trip length to add to estimated cost.
* **Cost Calculation:** Sum transportation and accommodation estimates plus daily expenses to show total cost.
* **Route Visualization:** Display the trip timeline. For example, use a draggable list (with `react-beautiful-dnd`) to allow reordering stops„Äê38‚Ä†„Äë. Pseudocode:

  ```jsx
  <DragDropContext onDragEnd={handleReorder}>
    <Droppable droppableId="itinerary">
      {provided => (
        <ul {...provided.droppableProps} ref={provided.innerRef}>
          {destinations.map((stop, idx) => (
            <Draggable key={stop.id} draggableId={stop.id} index={idx}>
              {provided => (
                <li ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>
                  {stop.name} ({stop.arrivalDate} ‚Äì {stop.departureDate})
                </li>
              )}
            </Draggable>
          ))}
          {provided.placeholder}
        </ul>
      )}
    </Droppable>
  </DragDropContext>
  ```
* **Map Preview (Optional):** We could use a map library (Leaflet or Google Maps) to draw lines between cities. For now, showing a list with dates suffices. Each step of the wizard should validate inputs before proceeding to the next.

## ü§ñ AI-Powered Trip Generator

We integrate an LLM (OpenAI‚Äôs GPT or Anthropic‚Äôs Claude) to auto-generate itineraries. For example, using OpenAI‚Äôs Chat API in Node.js:

```js
import OpenAI from 'openai';
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

async function generateItinerary({ location, duration, interests }) {
  const prompt = `Plan a ${duration}-day trip to ${location} focusing on ${interests}.`;
  const res = await openai.chat.completions.create({
    model: "gpt-4o",
    messages: [
      { role: "system", content: "You are a helpful AI travel assistant. Provide detailed trip plans." },
      { role: "user", content: prompt }
    ],
  });
  return res.choices[0].message.content; // This would be the itinerary text
}
```

This matches patterns like ‚ÄúYou are a helpful AI travel assistant‚Ä¶‚Äù. The response is parsed and presented in the same trip builder UI (converted into days/destinations). The user can then edit any part and save it as a regular trip. On the frontend, call an API route `/api/ai/itinerary` that invokes this function.

## üåç Community Features (Comments & Profiles)

* **Comments & Reviews:** Each city or attraction can have a comment section. We create a `/api/comments` route: posting a comment (with `userId`, `destinationId`, `text`, `rating`). For example:

  ```js
  app.post('/api/comments', requireAuth, async (req, res) => {
    const { destinationId, text, rating } = req.body;
    const comment = { user: req.auth.userId, dest: destinationId, text, rating, date: new Date() };
    await db.setMany({ [`comment:${uuidv4()}`]: JSON.stringify(comment) });
    res.json({ status: 'saved' });
  });
  ```

  Display comments in React by fetching `/api/comments?dest=XYZ`. Use a simple card layout:

  ```jsx
  <div className="border p-4 rounded-lg shadow-sm">
    <div className="flex items-center mb-2">
      <img className="h-8 w-8 rounded-full" src={user.avatar} alt="user"/>
      <span className="ml-2 font-semibold">{user.name}</span>
      <RatingStars value={comment.rating}/>
    </div>
    <p className="text-gray-700">{comment.text}</p>
    <small className="text-gray-500">{comment.date}</small>
  </div>
  ```
* **Rating Component:** Use a star rating component (e.g. from [@material-tailwind/react](https://www.material-tailwind.com/docs/react/rating) or custom). GeeksforGeeks notes creating a rating widget with clickable stars improves UX. We can implement a `RatingStars` component using React state and icons (‚òÖ).
* **User Profiles:** Each user has a profile page showing their info and past trips. For example, route `/profile/:userId` fetches the user and their saved trips from DB. Display a card list of trips:

  ```jsx
  <div className="p-4 max-w-md bg-white rounded-lg shadow">
    <h2>{user.name}</h2>
    <p>Trips taken:</p>
    {trips.map(trip => (
      <div key={trip.id} className="mt-2 p-3 bg-gray-50 rounded">
        <h4>{trip.name}</h4>
        <small>{trip.startDate} ‚Äì {trip.endDate}</small>
      </div>
    ))}
  </div>
  ```

## üì± UI/UX & Responsiveness

We use **Tailwind CSS** for a clean, responsive design. Key UI guidelines:

* **Mobile-First:** Use unprefixed classes for mobile and `md:`/`lg:` prefixes for larger screens. E.g. `<button className="w-full md:w-auto px-4 py-2">` makes buttons full-width on small screens and auto on medium up.
* **Cards & Buttons:** Cards are rounded, shadowed, with hover states. Example: `<div className="rounded-lg shadow hover:shadow-lg transition p-4">`. Buttons are full-width (`w-full`) on mobile (`sm:` screens) and smaller on desktop.
* **Navigation:** The sidebar collapses into a hamburger on mobile. Content stacks vertically with adequate padding. We can use Tailwind‚Äôs grid or flex utilities (e.g. `md:flex`, `gap-4`) for layouts.
* **Images:** Use free images from Unsplash for headers or backgrounds (e.g. `style={{ backgroundImage: 'url(https://source.unsplash.com/random/800x600?travel)'}}`). Keep image heights reasonable (`h-48`) and object-cover.
* **Theme & Fonts:** Choose a light modern theme. Example Tailwind setup:

  ```css
  @tailwind base;
  @tailwind components;
  @tailwind utilities;
  /* e.g. a custom class in tailwind.config.js for primary color */
  ```

  Use system fonts, and ensure high contrast for readability.

## üß† Architecture & Future Readiness

We structure code for modularity and future scaling:

* **Routes:** Keep API routes in separate modules (e.g. `routes/users.js`, `routes/trips.js`, `routes/ai.js`, `routes/comments.js`). Use async/await in all handlers and catch errors with middleware.
* **DB Layer:** All data access is in functions (e.g. `createUser`, `getTripsByUser`). If migrating to Supabase/Postgres, only these functions change (switch to SQL or Supabase client calls).
* **Env Config:** Use `.env` for keys: `REPLIT_DB_URL`, `GEODB_KEY`, `RAPIDAPI_KEY`, `OPENAI_API_KEY`, etc. When on Supabase, replace `REPLIT_DB_URL` with `DATABASE_URL` and use the official Supabase client or Prisma.
* **Error Handling:** Wrap API calls in try/catch. For example:

  ```js
  try {
    const data = await fetchCities(countryCode, query);
    res.json(data);
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: 'Failed to fetch cities' });
  }
  ```
* **Testing & Linting:** Although not implemented here, in production we‚Äôd add unit tests and ESLint/Prettier.

## ‚öôÔ∏è Installation & Run (Replit)

The project can run out-of-the-box on Replit:

* Place backend code in a Node.js Repl, configure `REPLIT_DB_URL` in Secrets.
* The React app can be served via Vite or Create React App in a separate Repl. Or use a single Repl with Express serving the React build.
* Ensure to install dependencies: `npm install express cors replit-node openai`, and for frontend: `npm install react-router-dom axios tailwindcss @heroicons/react`.

## üìÑ TODO / Documentation

* **Database Migration (Supabase):** To switch to Supabase, replace Replit DB calls with Supabase client or Prisma. Update `.env` with Supabase `DATABASE_URL`. For example, use `@supabase/supabase-js`:

  ```js
  import { createClient } from '@supabase/supabase-js';
  const supabase = createClient(process.env.SUPABASE_URL, process.env.SUPABASE_ANON_KEY);
  // e.g. const { data, error } = await supabase.from('users').select('*');
  ```
* **Stripe Billing:** Future work: integrate Stripe for subscription/billing. Create `/api/billing/subscribe` endpoint. Use Stripe‚Äôs Node SDK to create Checkout sessions. For example:

  ```js
  const stripe = require('stripe')(process.env.STRIPE_SECRET);
  app.post('/api/subscribe', async (req, res) => {
    const session = await stripe.checkout.sessions.create({ /* ... */ });
    res.json({ url: session.url });
  });
  ```
* **AI Prompt Improvements:** The prompt (‚Äúhelpful AI travel assistant‚Äù) can be tuned. Consider adding system prompts for tone or detailed itinerary formatting, or use retrieval-augmented generation with a knowledge base of attractions.
* **Deployment:** For production, deploy the frontend to Vercel and backend to Railway or Heroku:

  * *Vercel:* Push frontend React code to GitHub, create a new Vercel project, and set `REACT_APP_` env vars in settings. Vercel will detect React and build.
  * *Railway:* For the Express API, follow [Railway‚Äôs Express guide](https://docs.railway.com/deploy/deploy-express) (e.g. add a `Procfile: web: npm start`). Set environment variables (DB keys) in Railway dashboard.
  * Alternatively, use Docker: create a Dockerfile for the backend, then `docker push` to a container registry and deploy. For Vercel integration, see steps in \[30‚Ä†L186-L194] (push code, connect repo, add env vars).

Sources: Official docs and examples such as Material Tailwind‚Äôs sidebar component, the GeoDB API overview, Rome2Rio API description, a GPT-4 travel assistant tutorial, React rating component guide, and Tailwind‚Äôs responsive design guide. This ensures our design follows best practices and is easy to extend and deploy.
