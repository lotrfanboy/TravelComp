/**
 * Script para verificar a configura√ß√£o do Supabase e testar a conex√£o
 */
import dotenv from 'dotenv';
import { pool } from '../server/db';

// Carregar vari√°veis de ambiente
dotenv.config();

async function verifySupabaseSetup() {
  console.log('\nüöÄ VERIFICANDO CONFIGURA√á√ÉO DO SUPABASE');
  console.log('=====================================================');
  
  // Verificar se a vari√°vel de ambiente DATABASE_URL est√° definida
  if (!process.env.DATABASE_URL) {
    console.error('\n‚ùå DATABASE_URL n√£o est√° definido no arquivo .env');
    console.log('\nPara configurar o Supabase:');
    console.log('1. Crie um projeto no Supabase: https://app.supabase.io/');
    console.log('2. Acesse as configura√ß√µes do banco de dados (Settings > Database)');
    console.log('3. Copie a URI de conex√£o da se√ß√£o "Connection Pooling"');
    console.log('4. Substitua a senha no DATABASE_URL e adicione ao arquivo .env');
    console.log('\nFormato do DATABASE_URL:');
    console.log('DATABASE_URL=postgres://postgres:[SENHA]@db.[PROJETO-ID].supabase.co:5432/postgres');
    return false;
  }
  
  // Verificar formato da URL do banco de dados para Supabase
  const dbUrl = process.env.DATABASE_URL;
  
  if (!dbUrl.includes('supabase.co')) {
    console.log('\n‚ö†Ô∏è O DATABASE_URL n√£o parece ser do Supabase.');
    console.log('O formato esperado √©: postgres://postgres:[SENHA]@db.[PROJETO-ID].supabase.co:5432/postgres');
    console.log('\nSe voc√™ est√° usando outro provedor PostgreSQL, esta mensagem pode ser ignorada.');
  }
  
  // Testar a conex√£o com o banco de dados
  try {
    console.log('\nüîç Testando conex√£o com o banco de dados...');
    
    const client = await pool.connect();
    const result = await client.query('SELECT NOW() as time');
    const dbTime = result.rows[0].time;
    
    console.log(`\n‚úÖ Conex√£o bem-sucedida!\n`);
    console.log(`üïí Hora do servidor: ${dbTime}`);
    
    // Obter informa√ß√µes do servidor
    const dbInfo = await client.query('SELECT version(), current_database() as db_name');
    console.log(`\nüìä Informa√ß√µes do servidor:`);
    console.log(`üìÅ Banco de dados: ${dbInfo.rows[0].db_name}`);
    console.log(`üõ¢Ô∏è Vers√£o: ${dbInfo.rows[0].version.split(',')[0]}`);
    
    // Verificar tabelas existentes
    const tablesQuery = await client.query(`
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public'
      ORDER BY table_name
    `);
    
    console.log(`\nüìã Tabelas existentes (${tablesQuery.rowCount}):`);
    
    if (tablesQuery.rowCount === 0) {
      console.log('   Nenhuma tabela encontrada. Execute o script de migra√ß√£o:');
      console.log('   $ npm run db:migrate');
    } else {
      tablesQuery.rows.forEach((row, index) => {
        console.log(`   ${index + 1}. ${row.table_name}`);
      });
    }
    
    client.release();
    return true;
  } catch (error: any) {
    console.error('\n‚ùå Erro ao conectar com o banco de dados:');
    console.error(`   ${error.message}`);
    
    if (error.message.includes('no pg_hba.conf entry')) {
      console.log('\nüí° Este erro geralmente indica um problema com as regras de acesso do Supabase.');
      console.log('Verifique se voc√™ habilitou o acesso externo nas configura√ß√µes do Supabase.');
    }
    
    if (error.message.includes('password authentication failed')) {
      console.log('\nüí° A senha no DATABASE_URL parece estar incorreta.');
      console.log('Verifique a senha do seu projeto Supabase e atualize a URL no arquivo .env');
    }
    
    if (error.message.includes('getaddrinfo')) {
      console.log('\nüí° N√£o foi poss√≠vel resolver o endere√ßo do servidor.');
      console.log('Verifique se o ID do projeto Supabase est√° correto no DATABASE_URL.');
    }
    
    console.log('\nüìù Formato correto da URL do Supabase:');
    console.log('DATABASE_URL=postgres://postgres:[SENHA]@db.[PROJETO-ID].supabase.co:5432/postgres');
    
    return false;
  } finally {
    await pool.end();
  }
}

// Executar verifica√ß√£o
verifySupabaseSetup().then((success) => {
  if (success) {
    console.log('\n‚ú® Configura√ß√£o do Supabase est√° correta e pronta para uso!');
    console.log('\nPr√≥ximos passos:');
    console.log('1. Execute a migra√ß√£o para criar as tabelas: npm run db:migrate');
    console.log('2. Popule o banco com dados de exemplo: npm run db:seed');
    process.exit(0);
  } else {
    console.log('\n‚ö†Ô∏è Corrija os problemas de configura√ß√£o e tente novamente.');
    process.exit(1);
  }
});